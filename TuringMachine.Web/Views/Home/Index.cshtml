@{
    ViewData["Title"] = "Home Page";
    Layout = "_Layout";
}
<link rel="stylesheet" href="~/css/index.css">
<div class="tape_area">
	<div class="tape">
		<button class="tape_left" onclick="tape_left()"><</button>
		<table class="tape_table">
			<tr class="tape_indexes">
				@for (int i = -10; i <= 10; i++)
				{
					<td>@i</td>
				}
			</tr>
			<tr class="tape_values">
				@for (int i = -10; i <= 10; i++)
				{
					<td class="tape_item">
						<select class="tape_item_select">
							<option value=" " selected>&#8195;</option>
						</select>
					</td>
				}
			</tr>
		</table>
		<button class="tape_right" onclick="tape_right()">></button>
	</div>
</div>

<div class="transition_table_area">
	<table class="transition_table">
		<tr class="transition_table_headers">
			<td class="transition_table_item">States\Words</td>
			<td class="transition_table_item">
				<div>
				'<input class="transition_table_word" type="text" value="&#8195;" size="1" maxlength="1" onchange="updateWord(this)" readonly>'
				</div
				><span class="close_hidden"></span>
			</td>
			<td class="transition_table_item">
				<button class="transition_table_button" onClick="addWord()">Add word</button>
			</td>
		</tr>
		<tr class="transition_table_state">
			<td class="transition_table_item">
				<div>q0</div><span class="close_hidden"></span>
			</td>
			<td class="transition_table_item">
				<div>
					<select class="transition_table_word_select">
						<option value="blank" selected>...</option>
						<option value=" ">&#8195;</option>
					</select
					><select class="transition_table_move_select">
						<option value="blank" selected>...</option>
						<option value="Left">←</option>
						<option value="Stay">↓</option>
						<option value="Right">→</option>
					</select
					><select class="transition_table_state_select">
						<option value="blank" selected>...</option>
						<option value="stop">Stop</option>
						<option value="q0">q0</option>
					</select>
				</div
				><span class="close" onclick="resetTransition(this)"></span>
			</td>
		</tr>
		<tr class="transition_table_state">
			<td class="transition_table_item">
				<button class="transition_table_button" onClick="addState()">Add state</button>
			</td>
		</tr>
	</table>
</div>
<div id="hidden_form_container"></div>
<div class="buttons_area">
	<button class="control_button" onClick="save()">Save</button>
	<button class="control_button" onClick="load()">Load</button>
	<button class="control_button" onClick="build()">Build</button>
<div>
<script>
    var center = 0;
	var alphabet = [" "];
	var items = document.getElementsByClassName("tape_item");
	var transitionTable = document.getElementsByClassName("transition_table")[0].tBodies[0];
    var tapeMap = new Map();
	for(var i = 0; i < items.length; i++){
		tapeMap.set(i - 10, items[i].children[0]);
	}

    function tape_right() {
        center++;
        renderTape();
    }

    function tape_left() {
        center--;
        renderTape();
    }

    function renderTape() {
		var from = center - 10;
		var to = center + 10;
		var indexes = document.getElementsByClassName("tape_indexes")[0].getElementsByTagName("td");
        for (var index = from; index <= to; index++) {
			var value = tapeMap.get(index);
			if (value == undefined){
				value = createTapeSelect();
				tapeMap.set(index, value);
			}
			var number = index - from;
			items[number].innerHTML = "";
			items[number].appendChild(value);
			indexes[number].innerHTML = index;
        }
    }
	
	function createTapeSelect(){
		var select = document.createElement('select');
		select.className += "tape_item_select"
		updateSelectOptions(select, alphabet, alphabet);
		return select;
	}
	
	function updateTransitionSelectOptions(select, texts, values){
		updateSelectOptions(select, ["..."].concat(texts), ["blank"].concat(values));
	}
	
	function updateSelectOptions(select, texts, values){
		var previousValue = getSelectedItem(select);
		select.innerHTML = "";
		for(var i = 0; i < texts.length; i++){
			var option = document.createElement('option');
			option.value = values[i];
			option.innerHTML = texts[i];
			select.appendChild(option);
		}
		trySelectOptionOrDefault(select, previousValue);
	}
	
	function trySelectOptionOrDefault(select, val){
		var valIndex = 0;
		for(var i = 0; i < select.options.length; i++){
			if (select.options[i].value == val){
				valIndex = i;
				break;
			}
		}
		select.options.selectedIndex = valIndex;
	}
	
	function addWord(){
		var headers = transitionTable.rows[0];
		var cellIndex = headers.cells.length - 1;
		var wordCell = headers.insertCell(cellIndex);
		wordCell.innerHTML = "<div>'<input class=\"transition_table_word\" type=\"text\" size=\"1\" maxlength=\"1\" onchange=\"updateWord(this)\">'</div><span class=\"close\" onClick=\"deleteWord(this)\"></span>";
		wordCell.className += "transition_table_item";
		for(var i = 1; i < transitionTable.rows.length - 1; i++){		
			addTransitionCell(transitionTable.rows[i], cellIndex);	
		}
		var tableArea = document.getElementsByClassName("transition_table_area")[0];
		tableArea.scrollLeft = tableArea.scrollWidth;
	}
	
	function addState(){
		var nextState;
		if (transitionTable.rows.length > 2){
			var lastIndex = transitionTable.rows.length - 2;
			var lastRow = transitionTable.rows[lastIndex];
			nextState = parseInt(lastRow.cells[0].children[0].innerHTML.replace("q", "")) + 1;
		}
		else nextState = 1;
		var wordsCount = transitionTable.rows[0].cells.length - 2;
		var stateRow = transitionTable.insertRow(transitionTable.rows.length - 1);
		var stateCell = stateRow.insertCell(0);
		stateCell.innerHTML = "<div>q" + nextState + "</div><span class=\"close\" onClick=\"deleteState(this)\"></span>";
		stateCell.className += "transition_table_item";
		for (var i = 1; i <= wordsCount; i++){
			addTransitionCell(stateRow, i);	
		}
		updateStateSelects();
		var tableArea = document.getElementsByClassName("transition_table_area")[0];
		tableArea.scrollTop = tableArea.scrollHeight;
	}
	
	function addTransitionCell(row, index){
		var cell = row.insertCell(index);
		cell.className += "transition_table_item";
		var div = document.createElement('div');
		var wordSelect = document.createElement('select');
		wordSelect.className += "transition_table_word_select";
		updateTransitionSelectOptions(wordSelect, alphabet, alphabet);
		var transitionSelect = document.createElement('select');
		transitionSelect.className += "transition_table_move_select";
		updateTransitionSelectOptions(transitionSelect, ["←", "↓", "→"], ["Left", "Stay", "Right"]);
		var states = getAllStates();
		var stateSelect = document.createElement('select');
		updateTransitionSelectOptions(stateSelect, states, states);
		stateSelect.className += "transition_table_state_select";
		var span = document.createElement('span');
		span.className += "close";
		span.onclick = function(){
			resetTransition(span);
		};
		div.appendChild(wordSelect);
		div.appendChild(transitionSelect);
		div.appendChild(stateSelect);
		cell.appendChild(div);
		cell.appendChild(span);
	}
	
	function updateWord(input){		
		if (alphabet.includes(input.value)){
			alert("Word '" + input.value + "' already exists in alphabet");
			input.value = "";
			return;
		}
		updateAlphabet();
	}
	
	function updateAlphabet(){
		alphabet = [];
		var words = document.getElementsByClassName("transition_table_word");
		for(var i = 0; i < words.length; i++){
			if (words[i].value != "")
				alphabet.push(words[i].value);
		}
		for (var select of tapeMap.values()) {
			updateSelectOptions(select, alphabet, alphabet);
		}
		updateWordSelects();
	}
	
	function deleteState(span){
		var row = span.parentElement.parentElement;
		row.parentElement.removeChild(row);
		updateStateSelects();
	}
	
	function deleteWord(span){
		var cell = span.parentElement;
		var row =  cell.parentElement;
		var index = cell.cellIndex;
		for(var i = 0; i < transitionTable.rows.length - 1; i++){
			transitionTable.rows[i].deleteCell(index);
		}
		updateAlphabet();
	}
	
	function resetTransition(span){
		var cell = span.parentElement;
		var selects = cell.children[0];
		for(var i = 0; i < 3; i++){
			selects.children[i].selectedIndex = 0;
		}
	}
	
	function updateStateSelects(){
		var states = getAllStates();
		var texts = ["Stop"].concat(states);
		var values = ["stop"].concat(states);
		var selects = document.getElementsByClassName("transition_table_state_select");
		for (var i = 0; i < selects.length; i++){
			var select = selects[i];
			updateTransitionSelectOptions(select, texts, values);
		}
	}
	
	function updateWordSelects(){
		var selects = document.getElementsByClassName("transition_table_word_select");
		for (var i = 0; i < selects.length; i++){
			var select = selects[i];
			updateTransitionSelectOptions(select, alphabet, alphabet);
		}		
	}
	
	function getAllStates(){
		var states = [];
		for(var i = 1; i < transitionTable.rows.length - 1; i++){
			states.push(transitionTable.rows[i].cells[0].children[0].innerHTML);
		}
		return states;
	}
	
	function createJson(){
		var machine = new Object();
		machine.tape = [];
		for (var index of tapeMap.keys()){
			var select = tapeMap.get(index);
			var selectedOption = select[select.selectedIndex];
			if (selectedOption != undefined)
				var val = selectedOption.value;
			else val = " ";
			var tapeItem = new Object();
			tapeItem.index = index;
			tapeItem.value = val;
			machine.tape.push(tapeItem);
		}
		machine.alphabet = alphabet;
		machine.states = getAllStates();
		machine.transitions = [];
		
		var words = document.getElementsByClassName("transition_table_word_select");
		var moves = document.getElementsByClassName("transition_table_move_select");
		var states = document.getElementsByClassName("transition_table_state_select");
		
		for (var i = 0; i < words.length; i++){
			var transition = new Object();
			transition.word = getSelectedItem(words[i]);
			transition.move = getSelectedItem(moves[i]);
			transition.state = getSelectedItem(states[i]);
			machine.transitions.push(transition);
		}
		
		return JSON.stringify(machine);
	}
	
	function getSelectedItem(select){		
		var selectedIndex = select.options.selectedIndex;
		var selectedOption = select.options[selectedIndex];
		if (selectedOption != undefined)			
			return select.options[selectedIndex].value;
		else return undefined;
	}
	
	function build(){
		var form, input;
		form = document.createElement('form');
		form.action = 'Home/Build';
		form.method = 'post';
		input = document.createElement('input');
		input.type = 'hidden';
		input.name = 'turingMachineJson';
		input.value = createJson();
		form.appendChild(input);
		document.getElementById('hidden_form_container').appendChild(form);
		form.submit();
	}
</script>